@page "/Auth/SignUp"

@using WebAdvert.App.Data
@using WebAdvert.App.Models.Auth
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<h3>Signup</h3>
<p>Sign Up for the WebAdvert system.</p>

<EditForm EditContext="@editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="form-group row mb-1">
        <label class="col-sm-1 col-form-label" for="email">Email: </label>
        <div class="col-sm-3">
            <InputText id="email" Class="form-control" @bind-Value="signUp.Email" />
            <ValidationMessage For="@(() => signUp.Email)" />
        </div>
    </div>

    <div class="form-group row mb-1">
        <label class="col-sm-1 col-form-label" for="name">Name: </label>
        <div class="col-sm-3">
            <InputText id="name" Class="form-control" @bind-Value="signUp.Name" />
            <ValidationMessage For="@(() => signUp.Name)" />
        </div>
    </div>

    <div class="form-group row mb-1">
        <label class="col-sm-1 col-form-label" for="password">Password: </label>
        <div class="col-sm-3">
            <InputText id="password" Class="form-control" @bind-Value="signUp.Password" />
            <ValidationMessage For="@(() => signUp.Password)" />
        </div>
    </div>

    <div class="form-group row mb-1">
        <label class="col-sm-1 col-form-label" for="confirmpassword">ConfirmPassword: </label>
        <div class="col-sm-3">
            <InputText id="confirmpassword" Class="form-control" @bind-Value="signUp.ConfirmPassword" />
            <ValidationMessage For="@(() => signUp.ConfirmPassword)" />
        </div>
    </div>

    <br />
    <div class="form-group row mb-1">
        <div class="col-sm-2">
            <button type="submit" id="btnSignUp" class="btn btn-primary">Sign Up</button>
        </div>
    </div>
</EditForm>

@code {
    private SignUpModel signUp = new SignUpModel();
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(signUp);
    }

    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate() && await ServerValidate(editContext);
        if (isValid)
        {
            NavigationManager.NavigateTo("/auth/confirm");
        }
    }

    private async Task<bool> ServerValidate(EditContext editContext)
    {
        var result = await AuthService.RegisterUser((SignUpModel)editContext.Model);

        if (!result.Object)
        {
            ValidationMessageStore messageStore = new ValidationMessageStore(editContext);
            messageStore.Add(editContext.Field("Email"), result.Errors);
            editContext.NotifyValidationStateChanged();
        }

        return result.Object;
    }
}
